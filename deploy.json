{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseName": {
      "defaultValue": "mediajobfunc",
      "type": "string",
      "metadata": {
        "description": "Name use as base-template to named the resources to be deployed in Azure."
      }
    },
    "InputContainer": {
      "type": "string",
      "defaultValue": "inputs",
      "metadata": {
        "description": "Name of the storage account container to watch for new incoming files"
      }
    },
    "OutputContainerPrefix": {
      "type": "string",
      "defaultValue": "vid",
      "metadata": {
        "description": "Prefix of the name to name each output container."
      }
    },
    "TransformName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Name of the azure media services transform to use. 'Default' is created by this template, any other transform would have to be created manually"
      }
    }
  },
  "variables": {
    "suffix": "[substring(toLower(uniqueString(resourceGroup().id, resourceGroup().location)),0,5)]",
    "funcAppName": "[toLower(concat(parameters('baseName'), variables('suffix')))]",
    "funcStorageAccountName": "[tolower(concat(substring(parameters('baseName'), 0, min(length(parameters('baseName')),16)), variables('suffix'), 'stg'))]",
    "funcMediaServicesName": "[tolower(concat(substring(parameters('baseName'), 0, min(length(parameters('baseName')),16)), variables('suffix'), 'mds'))]",
    "funcHhostingPlanName": "[concat(substring(parameters('baseName'), 0, min(length(parameters('baseName')),14)), variables('suffix'), 'plan')]",
    "insightsAppName": "[concat(substring(parameters('baseName'), 0, min(length(parameters('baseName')),14)), variables('suffix'), '-meta')]"
  },
  "resources": [
    {
      "apiVersion": "2018-11-01",
      "name": "[variables('funcAppName')]",
      "type": "Microsoft.Web/sites",
      "kind": "functionapp,linux",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('microsoft.insights/components/', variables('insightsAppName'))]",
        "[concat('Microsoft.Web/serverfarms/', variables('funcHhostingPlanName'))]",
        "[concat('Microsoft.Storage/storageAccounts/',variables('funcStorageAccountName'))]",
        "[concat('Microsoft.Media/mediaservices/',variables('funcMediaServicesName'))]"
      ],
      "properties": {
        "name": "[variables('funcAppName')]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "node"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "10.14.1"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('microsoft.insights/components/', variables('insightsAppName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(concat('microsoft.insights/components/', variables('insightsAppName')), '2015-05-01').ConnectionString]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('funcStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('funcStorageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
            },
            {
              "name": "AAD_CLIENT_ID",
              "value": "FILL_THIS_VALUE"
            },
            {
              "name": "AAD_SECRET",
              "value": "FILL_THIS_VALUE"
            },
            {
              "name": "AAD_TENANT_DOMAIN",
              "value": "FILL_THIS_VALUE"
            },
            {
              "name": "OUTPUT_CONTAINER_PREFIX",
              "value": "[parameters('OutputContainerPrefix')]"
            },
            {
              "name": "SUBSCRIPTION_ID",
              "value": "[subscription().subscriptionId]"
            },
            {
              "name": "RESOURCE_GROUP",
              "value": "[resourceGroup().name]"
            },
            {
              "name": "MEDIA_SERVICES_NAME",
              "value": "[variables('funcMediaServicesName')]"
            },
            {
              "name": "INPUT_CONTAINER",
              "value": "[parameters('InputContainer')]"
            },
            {
              "name": "TRANSFORM_NAME",
              "value": "[parameters('TransformName')]"
            },
            {
              "name": "NODE_ENV",
              "value": "production"
            },
            {
              "name": "STORAGE_CONNECTION_STRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('funcStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('funcStorageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
            },
            {
              "name": "WEBSITE_RUN_FROM_ZIP",
              "value": "https://github.com/SoTrx/function-create-media-job/releases/latest/download/default.function-upload-to-blob.zip"
            }
          ],
          "use32BitWorkerProcess": false,
          "linuxFxVersion": "Node|14"
        },
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('funcHhostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": true
      },
      "resources": []
    },
    {
      "apiVersion": "2019-08-01",
      "name": "[variables('funcHhostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "kind": "app,linux",
      "properties": {
        "name": "[variables('funcHhostingPlanName')]",
        "computeMode": "Dynamic",
        "reserved": true
      },
      "sku": {
        "Tier": "Dynamic",
        "Name": "Y1"
      }
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('insightsAppName')]",
      "type": "microsoft.insights/components",
      "location": "[resourceGroup().location]",
      "kind": "",
      "properties": {
        "Application_Type": "web",
        "ApplicationId": "[variables('funcAppName')]",
        "Request_Source": "rest"
      }
    },
    {
      "apiVersion": "2019-06-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('funcStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "tags": {},
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "name": "[variables('funcMediaServicesName')]",
      "type": "Microsoft.Media/mediaservices",
      "apiVersion": "2018-07-01",
      "tags": {},
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',variables('funcStorageAccountName'))]"
      ],
      "location": "[resourceGroup().location]",
      "properties": {
        "storageAccounts": [
          {
            "id": "[resourceId('Microsoft.Storage/storageAccounts/',variables('funcStorageAccountName'))]",
            "type": "Primary"
          }
        ]
      },
      "resources": [
        {
          "name": "default",
          "type": "transforms",
          "dependsOn": [
            "[concat('Microsoft.Media/mediaservices/',variables('funcMediaServicesName'))]"
          ],
          "apiVersion": "2018-07-01",
          "properties": {
            "description": "string",
            "outputs": [
              {
                "onError": "StopProcessingJob",
                "relativePriority": "Normal",
                "preset": {
                  "@odata.type": "#Microsoft.Media.BuiltInStandardEncoderPreset",
                  "presetName": "AdaptiveStreaming"
                }
              }
            ]
          },
          "resources": []
        }
      ]
    }
  ],
  "outputs": {}
}
